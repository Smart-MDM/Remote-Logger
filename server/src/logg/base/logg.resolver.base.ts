/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLoggArgs } from "./CreateLoggArgs";
import { UpdateLoggArgs } from "./UpdateLoggArgs";
import { DeleteLoggArgs } from "./DeleteLoggArgs";
import { LoggFindManyArgs } from "./LoggFindManyArgs";
import { LoggFindUniqueArgs } from "./LoggFindUniqueArgs";
import { Logg } from "./Logg";
import { LoggService } from "../logg.service";

@graphql.Resolver(() => Logg)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class LoggResolverBase {
  constructor(
    protected readonly service: LoggService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Logg",
    action: "read",
    possession: "any",
  })
  async _loggsMeta(
    @graphql.Args() args: LoggFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Logg])
  @nestAccessControl.UseRoles({
    resource: "Logg",
    action: "read",
    possession: "any",
  })
  async loggs(@graphql.Args() args: LoggFindManyArgs): Promise<Logg[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Logg, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Logg",
    action: "read",
    possession: "own",
  })
  async logg(@graphql.Args() args: LoggFindUniqueArgs): Promise<Logg | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Logg)
  @nestAccessControl.UseRoles({
    resource: "Logg",
    action: "create",
    possession: "any",
  })
  async createLogg(@graphql.Args() args: CreateLoggArgs): Promise<Logg> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Logg)
  @nestAccessControl.UseRoles({
    resource: "Logg",
    action: "update",
    possession: "any",
  })
  async updateLogg(@graphql.Args() args: UpdateLoggArgs): Promise<Logg | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Logg)
  @nestAccessControl.UseRoles({
    resource: "Logg",
    action: "delete",
    possession: "any",
  })
  async deleteLogg(@graphql.Args() args: DeleteLoggArgs): Promise<Logg | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
